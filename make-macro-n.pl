#!/usr/bin/perl -w

use constant MAXN => 50;

print "/* automatically generated by $0 */

#define __VA_NARGS(";
for $n (1 .. MAXN) {
    print "_$n, ";
    print "\\\n    " if ($n % 10 == 0);
}
print "N, ...) N

#define VA_NARGS(...) __VA_NARGS(__VA_ARGS__";

for ($n = MAXN; $n >= 1; --$n) {
    print ", ";
    print "\\\n    " if ($n % 10 == 0);
    print "$n";
}
print ")

#define VA_NPAIRS(...) __VA_NARGS(__VA_ARGS__";
for ($n = MAXN / 2; $n >= 1; --$n) {
    print ", ";
    print "\\\n    " if ($n % 5 == 0);
    print "$n, X";
}

print ")

";

for $n (1 .. MAXN) {
    my $p = $n - 1;
    print "#define _INC$p $n\n";
}

print "#define _INC(n) _INC ## n
#define INC(n) _INC(n)

";

for $n (1 .. MAXN) {
    my $p = $n - 1;
    print "#define _DEC$n $p\n";
}

print "#define _DEC(n) _DEC ## n
#define DEC(n) _DEC(n)

#define _FOR_NA1(n, op, cbarg, sep, arg, ...) op(n, cbarg, arg)
";

for $n (2 .. MAXN) {
    my $p = $n - 1;
    print "#define _FOR_NA$n(n, op, cbarg, sep, arg, ...) \\
  op(n, cbarg, arg) sep() _FOR_NA$p(INC(n), op, cbarg, sep, __VA_ARGS__)
";
}

print "#define __FOR_NARGS(n, op, cbarg, sep, ...) \\
  _FOR_NA ## n(1, op, cbarg, sep, __VA_ARGS__)
#define _FOR_NARGS(n, op, cbarg, sep, ...) \\
  __FOR_NARGS(n, op, cbarg, sep, __VA_ARGS__)
#define FOR_NARGS(op, cbarg, sep, ...) \\
  _FOR_NARGS(VA_NARGS(__VA_ARGS__), op, cbarg, sep, __VA_ARGS__)

";

for $n (1 .. MAXN) {
    print "#define ARGN$n(";
    for $a (1 .. $n) {
        print "_$a, ";
        print "\\\n    " if ($a % 10 == 0);
    }
    print "...) _$n\n";
}

print "
#define __FORP1(op, sep, a, b) op(a, b)
";

for (my $n = 2; $n <= MAXN / 2; ++$n) {
    my $p = $n - 1;
    print "#define __FORP$n(op, sep, a, b, ...) \\
  op(a, b) sep() __FORP$p(op, sep, __VA_ARGS__)\n";
}

print "
#define __FORP(n, op, sep, ...) __FORP ## n(op, sep, __VA_ARGS__)
#define _FOR_PAIRS(n, op, sep, ...) \\
  __FORP(n, op, sep, __VA_ARGS__)
#define FOR_PAIRS(op, sep, ...) \\
  _FOR_PAIRS(VA_NPAIRS(__VA_ARGS__), op, sep, __VA_ARGS__)
";
